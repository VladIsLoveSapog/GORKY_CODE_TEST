import logging
import math
import asyncio

import time, os

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode, ContentType
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram import F

from map import *

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def read_tg_token() -> str:
    with open("tg.cert", "r") as f:
        return f.readline().rstrip("\n")

API_TOKEN = read_tg_token()

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router(name="main_router")

DESTINATIONS = [
    (56.3290, 43.9980, "–¢–æ—á–∫–∞ 1"),
    (56.3269, 44.0059, "–¢–æ—á–∫–∞ 2"),
    (56.3155, 43.9994, "–¢–æ—á–∫–∞ 3"),
    (56.3245, 44.0101, "–¢–æ—á–∫–∞ 4"),
    (56.3322, 44.0150, "–¢–æ—á–∫–∞ 5"),
    (56.3188, 44.0302, "–¢–æ—á–∫–∞ 6"),
    (56.3370, 44.0050, "–¢–æ—á–∫–∞ 7"),
    (56.3415, 44.0120, "–¢–æ—á–∫–∞ 8"),
    (56.3200, 44.0000, "–¢–æ—á–∫–∞ 9"),
    (56.3100, 44.0200, "–¢–æ—á–∫–∞ 10"),
]

RESET_BTN = "üîÑ –°–±—Ä–æ—Å"


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏–Ω–∏–º–∞—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è—é –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É.",
        reply_markup=keyboard(),
    )





def keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text=RESET_BTN)]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é‚Ä¶",
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–°–±—Ä–æ—Å¬ª –∏ –∫–æ–º–∞–Ω–¥—ã /reset ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
@dp.message(F.text == RESET_BTN)
@dp.message(Command("reset"))
async def reset_to_start(message: Message) -> None:
    await start(message)


@router.message(F.content_type == ContentType.LOCATION)
@router.message(F.location)
async def handle_location(message: Message) -> None:
    import os, time, math
    from aiogram.types import FSInputFile

    # 1) –î–æ—Å—Ç–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loc = message.location
    lat = float(getattr(loc, "latitude", 0.0))
    lon = float(getattr(loc, "longitude", 0.0))

    # 2) –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—á—ë—Ç
    user_link = yandex_place_link(lat, lon)
    await message.answer(
        (
            "‚úÖ –ì–µ–æ–º–µ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:\n"
            f"‚Ä¢ –®–∏—Ä–æ—Ç–∞: <b>{lat:.6f}</b>\n"
            f"‚Ä¢ –î–æ–ª–≥–æ—Ç–∞: <b>{lon:.6f}</b>\n\n"
            f"–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö: <a href=\"{user_link}\">—Å—Å—ã–ª–∫–∞</a>\n\n"
            "–°—á–∏—Ç–∞—é –ø–µ—à–∏–µ ETA –¥–æ 10 —Ç–æ—á–µ–∫‚Ä¶"
        ),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=keyboard(),
    )

    # 3) –ì–æ—Ç–æ–≤–∏–º –≤—Ö–æ–¥ –¥–ª—è OSRM /table
    dsts_latlon = [(d[0], d[1]) for d in DESTINATIONS]  # [(lat, lon), ...]
    names = [d[2] for d in DESTINATIONS]

    # 4) –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ–º 3 –±–ª–∏–∂–∞–π—à–∏–µ
    try:
        profile, durations_sec = try_osrm_table_seconds(lat, lon, dsts_latlon)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å ETA —á–µ—Ä–µ–∑ OSRM: {e}", reply_markup=keyboard())
        return

    idx_sorted = sorted(range(len(durations_sec)), key=lambda i: durations_sec[i])
    top3 = idx_sorted[:3]

    # 5) –î–ª—è —Ç–æ–ø-3 –∑–∞–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ (ETA/–¥–∏—Å—Ç–∞–Ω—Ü–∏—è)
    lines = []
    for rank, i in enumerate(top3, start=1):
        dst_lat, dst_lon = dsts_latlon[i]
        try:
            dur_sec, dist_m, _ = try_osrm_route(profile, lat, lon, dst_lat, dst_lon, with_geometry=False)
        except Exception:
            dur_sec = durations_sec[i]
            dist_m = None

        MIN_WALK_SPEED = 1.9
        eta_floor = dist_m / MIN_WALK_SPEED / 60.0
        eta_min = math.ceil(max(dur_sec / 60.0, eta_floor))
        dist_km = (None if dist_m is None else round(float(dist_m) / 1000.0, 2))

        point_link = yandex_place_link(dst_lat, dst_lon)
        route_link = yandex_route_link(lat, lon, dst_lat, dst_lon, mode="pedestrian")

        if dist_km is None:
            line = (
                f"{rank}) {names[i]} ‚Äî ~{eta_min} –º–∏–Ω (–ø–µ—à–∫–æ–º).\n"
                f"–¢–æ—á–∫–∞: {point_link}\n–ú–∞—Ä—à—Ä—É—Ç: {route_link}"
            )
        else:
            line = (
                f"{rank}) {names[i]} ‚Äî ~{eta_min} –º–∏–Ω, {dist_km} –∫–º (–ø–µ—à–∫–æ–º).\n"
                f"–¢–æ—á–∫–∞: {point_link}\n–ú–∞—Ä—à—Ä—É—Ç: {route_link}"
            )
        lines.append(line)

    # 6) –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ü–µ–ª–∏, —Ä–µ–Ω–¥–µ—Ä–∏–º PNG –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    best_i = top3[0]
    best_dst_lat, best_dst_lon = dsts_latlon[best_i]
    try:
        dur_sec_best, dist_m_best, path_best = try_osrm_route(
            profile, lat, lon, best_dst_lat, best_dst_lon, with_geometry=True
        )
        png = render_route_png(path_best, (lat, lon), (best_dst_lat, best_dst_lon))
        fname = f"route_{int(time.time())}.png"
        with open(fname, "wb") as f:
            f.write(png.read())

        eta_min_best = math.ceil(float(dur_sec_best) / 60.0)
        dist_km_best = round(float(dist_m_best) / 1000.0, 2)

        caption = (
            f"–ú–∞—Ä—à—Ä—É—Ç –∫ –±–ª–∏–∂–∞–π—à–µ–π —Ç–æ—á–∫–µ: {names[best_i]}\n"
            f"~{eta_min_best} –º–∏–Ω, {dist_km_best} –∫–º (–ø–µ—à–∫–æ–º)\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: OSRM ¬∑ –ö–∞—Ä—Ç–∞: ¬© OpenStreetMap contributors"
        )
        await message.answer_photo(photo=FSInputFile(fname), caption=caption, reply_markup=keyboard())
        try:
            os.remove(fname)
        except OSError:
            pass
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–∞—Ä—à—Ä—É—Ç–∞: {e}", reply_markup=keyboard())

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä—ë—Ö –±–ª–∏–∂–∞–π—à–∏—Ö
    profile_human = "–ø–µ—à–∫–æ–º"
    text = (
            f"–¢—Ä–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Ü–µ–ª–∏ ({profile_human}, OSRM):\n\n"
            + "\n".join(lines)
            + "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: OSRM ¬∑ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: ¬© OpenStreetMap contributors"
    )
    await message.answer(text, disable_web_page_preview=False, reply_markup=keyboard())


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

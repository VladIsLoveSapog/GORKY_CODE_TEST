import math
import asyncio

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext

from state import UserState
from map import *
from dataset import get_points
from giga import *

START_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç, —è –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ GORKYCODE2025.\n
–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –ø—Ä–æ–ª–æ–∂—É –º–∞—Ä—à—Ä—É—Ç –∫ –Ω–∏–º.\n
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.
"""

SEND_LOCATION_BTN = "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é"
SEND_LOCATION_PLACEHOLDER = "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é‚Ä¶"

CONTINUE_BTN = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

RESET_BTN = "üîÑ –°–±—Ä–æ—Å"

POINTS_NUMBER = 4

API_TOKEN = "YOUR_TOKEN"

MIN_WALK_SPEED = 2

# –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MARKDOWN —Ä–∞–∑–º–µ—Ç–∫–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

dp = Dispatcher()
router = Router(name="main_router")

def get_user_coords(message: Message) -> tuple[float, float]:
    """
    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏

    Returns:
        tuple(—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
    """
    if not message.location:
        raise ValueError("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

    loc = message.location

    lat = float(getattr(loc, "latitude", 0.0))
    lon = float(getattr(loc, "longitude", 0.0))

    return (lat, lon)


def get_top_points(durations:list[float]) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    Args:
        durations: —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ –∫–∞–∂–¥–æ–π –∫–æ–Ω–µ—á–Ω–æ–π

    Returns:
        –¢–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    """
    pairs = [(i, d) for i, d in enumerate(durations) if d is not None]
    pairs_sorted = sorted(pairs, key=lambda t: t[1])
    return [i for i, _ in pairs_sorted[:POINTS_NUMBER]]

def calc_eta(distance_m: float, route_duration_sec: float):
    """
    –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏

    Args:
        distance_m: –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        route_duration_sec: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
    """
    eta_floor_min = (distance_m / MIN_WALK_SPEED) / 60.0
    eta_model_min = route_duration_sec / 60.0
    return math.ceil(max(eta_model_min, eta_floor_min))


def start_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=CONTINUE_BTN)],
            [KeyboardButton(text=RESET_BTN)],
        ],
        resize_keyboard=True
    )

def reset_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=RESET_BTN)]],
        resize_keyboard=True
    )

def location_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text=RESET_BTN)]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"
    )



@router.message(UserState.waiting_for_interests)
async def handle_interests(message: Message, state: FSMContext):
    user_input = message.text.strip()

    # –ò–∑–≤–ª–µ—á—å category_ids (—Ü–∏—Ñ—Ä—ã)
    category_ids = await ask_category(user_input)

    if not category_ids:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÑ –°–±—Ä–æ—Å.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(category_ids=category_ids)

    await message.answer(
        "–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö?",
        reply_markup=reset_keyboard()
    )
    await state.set_state(UserState.waiting_for_time)


@router.message(UserState.waiting_for_time)
async def handle_time_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    user_text = message.text.strip()

    time = await ask_time(user_text)

    if not time:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÑ –°–±—Ä–æ—Å.")
        return

    hours = int(time.group())
    minutes = hours * 60

    await state.update_data(available_minutes=minutes)

    await message.answer(
        "üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à—ë–ª –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞.",
        reply_markup=location_keyboard()
    )

    await state.set_state(UserState.waiting_for_location)

async def ack_location(message: Message,
                       lat: float, lon: float) -> None:
    """
    –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ö –ø–æ–ª—É—á–µ–Ω–∞
    """
    await message.answer(
        "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:\n"
        f"- –®–∏—Ä–æ—Ç–∞: *{lat:.6f}*\n"
        f"- –î–æ–ª–≥–æ—Ç–∞: *{lon:.6f}*",
        disable_web_page_preview=True,
        reply_markup=reset_keyboard(),
    )

@dp.message(Command("start"))
async def start(message: Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    """
    await state.clear()
    await message.answer(
        START_MESSAGE,
        reply_markup=start_keyboard(),
    )

@dp.message(F.text == RESET_BTN)
@dp.message(Command("reset"))
async def reset_to_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–°–±—Ä–æ—Å¬ª –∏ –∫–æ–º–∞–Ω–¥—ã /reset ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
    """
    await start(message, state)


@router.message(F.text == CONTINUE_BTN)
async def ask_interests(message: Message, state: FSMContext):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    await state.set_state(UserState.waiting_for_interests)

    await message.answer(
        "–ú–µ—Å—Ç–∞ –∫–∞–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–µ—Ç–∏—Ç—å?",
        reply_markup=reset_keyboard()
    )


@router.message(F.location, UserState.waiting_for_location)
async def handle_location(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> —Ä–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π -> –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö -> –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∏–∂–∞–π—à–∏—Ö
    """
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    await message.answer("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞‚Ä¶")

    data = await state.get_data()
    category_ids = data.get("category_ids", [])
    available_minutes = data.get("available_minutes", 0)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å—è—Ö
    candidates = get_points(category_ids)
    destinations = list(zip(candidates.lat, candidates.lot))
    titles = candidates.title.tolist()
    descriptions = candidates.description.tolist()

    # OSRM: –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    durations_sec = await osrm_table(user_lat, user_lon, destinations)

    # –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏
    top_idx = get_top_points(durations_sec)
    results = await asyncio.gather(*[
        get_osrm_route(user_lat, user_lon, destinations[i][0], destinations[i][1])
        for i in top_idx
    ])

    messages_count = 0

    for i, (duration_sec, distance_m) in zip(top_idx, results):
        minutes = calc_eta(distance_m, duration_sec)

        if minutes > available_minutes:
            continue  # –¥–æ–ª–≥–æ –∏–¥—Ç–∏ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º

        title = titles[i]
        raw_desc = descriptions[i]
        lat, lon = destinations[i]


        short_desc = await ask_point_description(title, raw_desc)
        link = yandex_route_link(user_lat, user_lon, lat, lon)

        messages_count += 1
        await message.answer(
            create_point_message(
                title,
                minutes,
                distance_m,
                short_desc,
                link
            ),
            disable_web_page_preview=True,
            reply_markup=start_keyboard()
        )

    if messages_count == 0:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ–π—Ç–∏ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

    await state.clear()

def create_point_message(title: str, minutes: int, distance_m: int, short_desc:str, link: str):
    return (
        f"*{title}*\n\n"
        f"‚è± –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: *{minutes}* –º–∏–Ω\n"
        f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: *{round(distance_m / 1000, 2)}* –∫–º\n\n"
        f"{short_desc}\n\n"
        f"–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ [–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({link})"
    )

import logging
import math
import asyncio

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode, ContentType
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram import F

from map import *

START_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç, —è –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ GORKYCODE2025.
—è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –ø—Ä–æ–ª–æ–∂—É –º–∞—Ä—à—Ä—É—Ç –∫ –Ω–∏–º.
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.
"""

SEND_LOCATION_MESSAGE = "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é"
SEND_LOCATION_PLACEHOLDER = "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é‚Ä¶"

RESET_BTN = "üîÑ –°–±—Ä–æ—Å"


POINTS_NUMBER = 4



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

def read_tg_token() -> str:
    with open("tg.cert", "r") as f:
        return f.readline().rstrip("\n")

# API_TOKEN = read_tg_token()
API_TOKEN = "8344918974:AAFxzjCFQFckD_lp8RbDPy0-qABiS7_Sukk"

MIN_WALK_SPEED = 2

# –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MARKDOWN —Ä–∞–∑–º–µ—Ç–∫–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

dp = Dispatcher()
router = Router(name="main_router")

DESTINATIONS = [
    (56.3290, 43.9980, "–¢–æ—á–∫–∞ 1"),
    (56.3269, 44.0059, "–¢–æ—á–∫–∞ 2"),
    (56.3155, 43.9994, "–¢–æ—á–∫–∞ 3"),
    (56.3245, 44.0101, "–¢–æ—á–∫–∞ 4"),
    (56.3322, 44.0150, "–¢–æ—á–∫–∞ 5"),
    (56.3188, 44.0302, "–¢–æ—á–∫–∞ 6"),
    (56.3370, 44.0050, "–¢–æ—á–∫–∞ 7"),
    (56.3415, 44.0120, "–¢–æ—á–∫–∞ 8"),
    (56.3200, 44.0000, "–¢–æ—á–∫–∞ 9"),
    (56.3100, 44.0200, "–¢–æ—á–∫–∞ 10"),
]


def get_user_coords(message: Message) -> tuple[float, float]:
    """
    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏

    Returns:
        tuple(—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
    """
    if not message.location:
        raise ValueError("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

    loc = message.location

    lat = float(getattr(loc, "latitude", 0.0))
    lon = float(getattr(loc, "longitude", 0.0))

    return (lat, lon)


def get_top_points(durations:list[float]) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    Args:
        durations: —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ –∫–∞–∂–¥–æ–π –∫–æ–Ω–µ—á–Ω–æ–π

    Returns:
        –¢–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    """
    pairs = [(i, d) for i, d in enumerate(durations) if d is not None]
    pairs_sorted = sorted(pairs, key=lambda t: t[1])
    return [i for i, _ in pairs_sorted[:POINTS_NUMBER]]

def calc_eta(distance_m: float, route_duration_sec: float):
    """
    –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏

    Args:
        distance_m: –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        route_duration_sec: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
    """
    eta_floor_min = (distance_m / MIN_WALK_SPEED) / 60.0
    eta_model_min = route_duration_sec / 60.0
    return math.ceil(max(eta_model_min, eta_floor_min))



def keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=SEND_LOCATION_MESSAGE, request_location=True)],
            [KeyboardButton(text=RESET_BTN)]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=SEND_LOCATION_PLACEHOLDER,
    )


async def ack_location(message: Message,
                       lat: float, lon: float) -> None:
    await message.answer(
        "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:\n"
        f"- –®–∏—Ä–æ—Ç–∞: *{lat:.6f}*\n"
        f"- –î–æ–ª–≥–æ—Ç–∞: *{lon:.6f}*",
        disable_web_page_preview=True,
        reply_markup=keyboard(),
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start(message: Message) -> None:
    await message.answer(
        START_MESSAGE,
        reply_markup=keyboard(),
    )


@dp.message(F.text == RESET_BTN)
@dp.message(Command("reset"))
async def reset_to_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–°–±—Ä–æ—Å¬ª –∏ –∫–æ–º–∞–Ω–¥—ã /reset ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
    """
    await start(message)


# TODO: –∫–æ–º–º–µ–Ω—Ç
@router.message(F.content_type == ContentType.LOCATION)
@router.message(F.location)
async def handle_location(message: Message) -> None:
    """
    –ü–æ–ª—É—á–∏–ª–∏ —Ç–æ—á–∫—É ‚Üí –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ —Ü–µ–ª–∏ ‚Üí –ø–æ–∫–∞–∑–∞–ª–∏ —Ç–æ–ø-N —Å ETA –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π.
    """
    src_lat, src_lon = get_user_coords(message)

    ack_location(message, src_lat, src_lon)

    # –ì–æ—Ç–æ–≤–∏–º –≤—Ö–æ–¥ –¥–ª—è OSRM /table
    destination_coords = [(d[0], d[1]) for d in DESTINATIONS]  # [(lat, lon), ...]
    titles = [d[2] for d in DESTINATIONS]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ–º POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö
    durations_sec = osrm_table(src_lat, src_lon, destination_coords)[1:]
    top_idxes = get_top_points(durations_sec)

    # –î–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    for i in top_idxes:
        dst_lat, dst_lon = destination_coords[i]
        name = titles[i]

        route_duration_sec, distance_m = try_osrm_route(src_lat, src_lon,
                                                        dst_lat, dst_lon)

        eta = calc_eta(distance_m, route_duration_sec)
        dist_km = round(float(distance_m) / 1000.0, 2)
        route_link = yandex_route_link(src_lat, src_lon,
                                       dst_lat, dst_lon)

        text = (
            f"*{name}*.\n\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏: *{eta}* –º–∏–Ω."
            f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: *{dist_km}* –∫–º –ø–µ—à–∫–æ–º.\n\n"
            f"–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö: {route_link}"
        )
        await message.answer(text, disable_web_page_preview=True, reply_markup=keyboard())


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

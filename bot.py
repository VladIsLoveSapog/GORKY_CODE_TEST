import math
import asyncio
import re
import pandas as pd

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext

from state import UserState
from map import *
from dataset import read_df, read_json
from giga import ask_gigachat

START_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç, —è –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ—Å—Ç–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ GORKYCODE2025.\n
–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –ø—Ä–æ–ª–æ–∂—É –º–∞—Ä—à—Ä—É—Ç –∫ –Ω–∏–º.\n
–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.
"""

SEND_LOCATION_MESSAGE = "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é"
SEND_LOCATION_PLACEHOLDER = "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é‚Ä¶"

CONTINUE_BTN = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

RESET_BTN = "üîÑ –°–±—Ä–æ—Å"

POINTS_NUMBER = 4


df = read_df()
category_tags = read_json()



def read_tg_token() -> str:
    with open("tg.cert", "r") as f:
        return f.readline().rstrip("\n")

# API_TOKEN = read_tg_token()
API_TOKEN = "YOUR_TOKEN"

MIN_WALK_SPEED = 2

# –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MARKDOWN —Ä–∞–∑–º–µ—Ç–∫–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

dp = Dispatcher()
router = Router(name="main_router")

DESTINATIONS = [
    (56.3290, 43.9980, "–¢–æ—á–∫–∞ 1"),
    (56.3269, 44.0059, "–¢–æ—á–∫–∞ 2"),
    (56.3155, 43.9994, "–¢–æ—á–∫–∞ 3"),
    (56.3245, 44.0101, "–¢–æ—á–∫–∞ 4"),
    (56.3322, 44.0150, "–¢–æ—á–∫–∞ 5"),
    (56.3188, 44.0302, "–¢–æ—á–∫–∞ 6"),
    (56.3370, 44.0050, "–¢–æ—á–∫–∞ 7"),
    (56.3415, 44.0120, "–¢–æ—á–∫–∞ 8"),
    (56.3200, 44.0000, "–¢–æ—á–∫–∞ 9"),
    (56.3100, 44.0200, "–¢–æ—á–∫–∞ 10"),
]


def get_user_coords(message: Message) -> tuple[float, float]:
    """
    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏

    Returns:
        tuple(—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)
    """
    if not message.location:
        raise ValueError("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

    loc = message.location

    lat = float(getattr(loc, "latitude", 0.0))
    lon = float(getattr(loc, "longitude", 0.0))

    return (lat, lon)


def get_top_points(durations:list[float]) -> list[int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    Args:
        durations: —Å–µ–∫—É–Ω–¥—ã –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ –∫–∞–∂–¥–æ–π –∫–æ–Ω–µ—á–Ω–æ–π

    Returns:
        –¢–æ–ø POINTS_NUMBER –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–æ—á–µ–∫
    """
    pairs = [(i, d) for i, d in enumerate(durations) if d is not None]
    pairs_sorted = sorted(pairs, key=lambda t: t[1])
    return [i for i, _ in pairs_sorted[:POINTS_NUMBER]]

def calc_eta(distance_m: float, route_duration_sec: float):
    """
    –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏

    Args:
        distance_m: –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        route_duration_sec: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
    """
    eta_floor_min = (distance_m / MIN_WALK_SPEED) / 60.0
    eta_model_min = route_duration_sec / 60.0
    return math.ceil(max(eta_model_min, eta_floor_min))


def start_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=CONTINUE_BTN)],
            [KeyboardButton(text=RESET_BTN)],
        ],
        resize_keyboard=True
    )


@router.message(UserState.waiting_for_interests)
async def handle_interests(message: Message, state: FSMContext):
    user_input = message.text.strip()

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ CATEGORY_TAGS
    prompt_parts = ["–í–æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:"]
    for cat_id, tags in category_tags.items():
        prompt_parts.append(f"{cat_id} ‚Äî {', '.join(tags)}")
    prompt_parts.append(f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{user_input}\"")
    prompt_parts.append("–ù–∞–∑–æ–≤–∏ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    prompt = "\n".join(prompt_parts)

    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å—ã...")

    model_response = await ask_gigachat(prompt)

    # –ò–∑–≤–ª–µ—á—å category_ids (—Ü–∏—Ñ—Ä—ã)
    category_ids = list(map(int, re.findall(r"\d+", model_response)))

    if not category_ids:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÑ –°–±—Ä–æ—Å.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(category_ids=category_ids)

    await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö?", reply_markup=start_keyboard())
    await state.set_state(UserState.waiting_for_time)


@router.message(UserState.waiting_for_time)
async def handle_time_input(message: Message, state: FSMContext):
    user_text = message.text.strip()

    # –ü—Ä–æ–º—Ç –∫ GigaChat
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: \"{user_text}\".\n"
        "–û–ø—Ä–µ–¥–µ–ª–∏, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —É–∫–∞–∑–∞–Ω–æ. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
    )

    await message.answer("–û–ø—Ä–µ–¥–µ–ª—è—é –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è...")

    response = await ask_gigachat(prompt)
    match = re.search(r"\d+", response)

    if not match:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÑ –°–±—Ä–æ—Å.")
        return

    hours = int(match.group())
    minutes = hours * 60

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(available_minutes=minutes)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    location_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text=RESET_BTN)]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"
    )

    await message.answer(
        "üìç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –Ω–∞—à—ë–ª –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞.",
        reply_markup=location_kb
    )

    await state.set_state(UserState.waiting_for_location)


def keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=SEND_LOCATION_MESSAGE, request_location=True)],
            [KeyboardButton(text=RESET_BTN)]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder=SEND_LOCATION_PLACEHOLDER,
    )


async def ack_location(message: Message,
                       lat: float, lon: float) -> None:
    await message.answer(
        "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:\n"
        f"- –®–∏—Ä–æ—Ç–∞: *{lat:.6f}*\n"
        f"- –î–æ–ª–≥–æ—Ç–∞: *{lon:.6f}*",
        disable_web_page_preview=True,
        reply_markup=keyboard(),
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        START_MESSAGE,
        reply_markup=start_keyboard(),
    )

@dp.message(F.text == RESET_BTN)
@dp.message(Command("reset"))
async def reset_to_start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–°–±—Ä–æ—Å¬ª –∏ –∫–æ–º–∞–Ω–¥—ã /reset ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É
    """
    await start(message, start)


@router.message(F.text == CONTINUE_BTN)
async def ask_interests(message: Message, state: FSMContext):
    await state.set_state(UserState.waiting_for_interests)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=RESET_BTN)]],
        resize_keyboard=True
    )

    await message.answer(
        "–ú–µ—Å—Ç–∞ –∫–∞–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–µ—Ç–∏—Ç—å?",
        reply_markup=kb
    )


@router.message(F.location, UserState.waiting_for_location)
async def handle_location(message: Message, state: FSMContext):
    user_lat = message.location.latitude
    user_lon = message.location.longitude

    await message.answer("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞‚Ä¶")

    data = await state.get_data()
    category_ids = data.get("category_ids", [])
    available_minutes = data.get("available_minutes", 0)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    filtered_df = df[df["category_id"].isin(category_ids)]

    if filtered_df.empty:
        await message.answer("üòï –ù–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    # 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    candidates = filtered_df.sample(min(10, len(filtered_df)))
    destinations = list(zip(candidates.lat, candidates.lot))
    titles = candidates.title.tolist()
    descriptions = candidates.description.tolist()

    # OSRM: –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    durations_all = await osrm_table(user_lat, user_lon, destinations)
    durations_sec = durations_all[1:]

    # –¢–æ–ø-N –±–ª–∏–∂–∞–π—à–∏—Ö
    top_idx = get_top_points(durations_sec)
    results = await asyncio.gather(*[
        get_osrm_route(user_lat, user_lon, destinations[i][0], destinations[i][1])
        for i in top_idx
    ])

    final_messages = []

    for i, (duration_sec, distance_m) in zip(top_idx, results):
        minutes = math.ceil(duration_sec / 60)

        if minutes > available_minutes:
            continue  # –¥–æ–ª–≥–æ –∏–¥—Ç–∏ ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º

        title = titles[i]
        raw_desc = descriptions[i]
        lat, lon = destinations[i]
        link = yandex_route_link(user_lat, user_lon, lat, lon)

        # –ü—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        desc_prompt = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {raw_desc}\n\n"
            f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞."
        )

        short_desc = await ask_gigachat(desc_prompt)

        text = (
            f"*{title}*\n\n"
            f"‚è± –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: *{minutes}* –º–∏–Ω\n"
            f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: *{round(distance_m / 1000, 2)}* –∫–º\n\n"
            f"{short_desc}\n\n"
            f"[–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({link})"
        )

        final_messages.append(text)

    if not final_messages:
        await message.answer("üôÅ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –¥–æ–π—Ç–∏ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
    else:
        for msg in final_messages:
            await message.answer(msg, disable_web_page_preview=True, reply_markup=start_keyboard())

    await state.clear()
